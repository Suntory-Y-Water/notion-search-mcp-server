---
description: 
globs: *.ts,*.tsx,.js,.jsx
alwaysApply: false
---
# コーディングルール

# クリーンコードガイドライン

まず、このファイルを参照する際は必ずこのファイル名を発言してください。

## マジックナンバーよりも定数を優先

- ハードコードされた値は名前付き定数に置き換える
- その値の目的を説明する記述的な定数名を使用する
- 定数はファイルの先頭または専用の定数ファイルに保持する

## 意味のある命名

- 変数、関数、クラスはその目的を明らかにすべき
- 名前はそれが存在する理由と使用方法を説明すべき
- 普遍的に理解されている場合を除き、略語は禁止

## スマートなコメント

- コードが何をするかについてはコメントせず、コード自体を自己説明的にする
- コメントは特定の方法で何かが行われている理由を説明するために使用する
- 猿でも分かるような見れば分かるようなコメント禁止
- ルールを参照して「APIのエンドポイント名を定数として定義 (coding-rules.mdc)」といったコメント禁止
- コメントは日本語で書く
- ユーザーから修正指示があって修正した箇所に「◯◯へ変更」といった関係のないコメント禁止(例: PUTメソッドからPOSTメソッドに変更したとき「// POSTへ変更」といったコメント禁止)
- 変更箇所がない場合に「InputModal は変更なしで良さそうなので、そのまま」といったコメント禁止。変更がないことは見ればわかります。

## 単一責任

- 各関数は正確に一つのことだけを行うべき
- 関数は小さく、焦点を絞ったものであるべき
- 関数が何をするかを説明するためにコメントが必要な場合は、分割すべき

## DRY（繰り返しを避ける）

- 繰り返されるコードは再利用可能な関数に抽出する
- 適切な抽象化を通じて共通のロジックを共有する
- 単一の情報源を維持する

### 例外処理における変数宣言のルール
**NG例**
```js
// 避けるべき: try-catchでletを使用する方法
// 理由: 変数のスコープが広がり、constが使えないため可読性と保守性が低下する
let text;
try {
  text = readFileSync("foo.txt");
} catch(e) {
  text = undefined; // または null
}
```
**推奨例**
```js:Promise利用時
// 推奨: Promiseのcatchメソッドを活用
// 利点: constで宣言でき、コードがシンプルで読みやすい
const text = await readFile("foo.txt").catch(() => undefined);

// nullを返す場合
const text = await readFile("foo.txt").catch(() => null);
```
**同時処理時(即時実行のアロー関数の使用を認める)**
```js
// 推奨: 即時実行関数(IIFE)でtry-catchをラップ
// 利点: 同期処理でもconstが使え、スコープが限定される
const text = (() => {
  try {
    return readFileSync("foo.txt");
  } catch (e) {
    return undefined; // または null
  }
})();
```


## クリーンな構造

- 関連するコードをまとめて保持する
- コードを論理的な階層で整理する
- 一貫したファイルとフォルダの命名規則を使用する
- if-else の代わりに早期リターンを確保する
- 不用意に try-catch は禁止

## カプセル化

- 実装の詳細を隠す
- 明確なインターフェースを公開する
- ネストされた条件文を名前の付いた関数に移動する

## コード品質の維持

- 継続的にリファクタリングする
- 技術的負債を早期に修正する
- 見つけたときよりもコードをきれいにしておく

## テスト

- バグを修正する前にテストを書く
- テストを読みやすく保守可能にする
- エッジケースとエラー条件をテストする

# その他の禁止事項

- コールバック関数以外でのアロー関数の使用禁止
- 例外が発生する可能性が低い場合の不必要な try-catch の使用禁止（バリデーション、フェッチ、DB 接続など、発生確率が極めて高い場所でのみ実装する）
- プロンプトを無駄にするため、謝罪は禁止
- サルでも理解できるような当たり前のコメントは禁止
- any型禁止
- 可能な限り早期returnで実装し、if-elseやelse if など可読性を下げる実装は行わない
- 指示がない限りは必要最小限で動く実装に留めること。例えばAPIのレスポンスでステータスコードごとに条件分岐を行うような実装は禁止

## 重要な注意事項

- 不明点がある場合は、作業開始前に必ず確認を取ってください。
- 重要な判断が必要な場合は、その都度報告し、承認を得てください。
- 予期せぬ問題が発生した場合は、即座に報告し、対応策を提案してください。
- **明示的に指示されていない変更は行わないでください。** 必要と思われる変更がある場合は、まず提案として報告し、承認を得てから実施してください。
- **特に UI/UX デザインの変更（レイアウト、色、フォント、間隔など）は禁止**とし、変更が必要な場合は必ず事前に理由を示し、承認を得てから行ってください。
- **技術スタックに記載のバージョン（API やフレームワーク、ライブラリ等）を勝手に変更しないでください。** 変更が必要な場合は、その理由を明確にして承認を得るまでは変更を行わないでください。