---
description: 
globs: *.md,*.mdx
alwaysApply: false
---
# ドキュメンテーション スタイルガイドライン

## AIアシスタントへの特記事項 (最重要)

このスタイルガイドラインは、AIによって生成されるドキュメントの品質を最大限に高め、人間による修正コストをゼロに近づけることを目的としています。以下の点を特に遵守してください。

### ルールの厳格な適用

#### ルール
べてのルールを文字通り解釈し、厳格に適用する。曖昧な点や解釈に迷う箇所がある場合、独自の判断や一般的な慣習に頼らず、必ず最もルールに忠実で安全な方法を選択する。
#### 理由
一貫性のないドキュメント生成を防ぎ、人間による修正コストを最小化する。
### 空白と改行の厳守

#### ルール
定された空白・改行ルールを正確に守る。不必要な空行やインデントの乱れは避ける。
#### 理由
不必要な空行やインデントの乱れは、手動修正の手間を増大させる。
#### 具体例

悪い例:
```markdown
### 見出し


段落がここに続く


- リストアイテム
```

良い例:
```markdown
### 見出し

段落がここに続く

- リストアイテム
```

### リストマーカーの統一

#### ルール
条書きのマーカーは、階層に関わらず常に `-` (ハイフンの後に半角スペース1つ) を使用する。他のマーカー (`*`, `+` など) は一切使用しない。
#### 理由
マーカーの不統一は視覚的な混乱を招き、ドキュメントの品質を低下させる。
#### 具体例
悪い例:
```markdown
* 項目1
+ 項目2
  * サブ項目
```

良い例:
```markdown
- 項目1
- 項目2
  - サブ項目
```

## 基本原則

### 修正コストの最小化
#### ルール
Iによって生成されたドキュメントは、細部の書式に至るまで人間による手直しが不要であることを最終目標とする。
#### 理由
人間による手直しが最小限で済むように、書式や空白の扱いを厳密に定めることで、生産性が向上する。
### 変更への耐性

#### ルール
部の変更が全体に影響を及ぼす可能性のある記述方法を避け、変更に強い構造を目指す。
#### 理由
将来的な変更や追加に対して柔軟性のある構造により、長期的なメンテナンスコストを削減できる。
#### 具体例
悪い例:
```markdown
1. 最初の項目
2. 二番目の項目
3. 三番目の項目
```

良い例:
```markdown
- 最初の項目
- 二番目の項目
- 三番目の項目
```

## 文体

### 基本的な文体
#### ルール
寧すぎる表現 (「〜しましょう」「〜ですね」など) は避け、「〜します」「〜です」といった直接的で簡潔な表現を使用する。
#### 理由直接的で簡潔な表現により、情報伝達が効率的になり、読み手の負担を軽減できる。
#### 具体例
悪い例:
```
それでは、設定ファイルを編集してみましょうね。
```

良い例:
```
設定ファイルを編集します。
```

### 冗長性の排除

#### ルール
長な説明は避け、情報を簡潔に伝える。同じ内容の繰り返しや、不必要な修飾は避ける。
#### 理由
簡潔な表現により読み手の時間を節約し、重要な情報に集中できる。
#### 具体例
悪い例:
```
次に説明するのは、とても重要で大切な設定項目についての詳細な説明です。
```

良い例:
```
重要な設定項目について説明します。
```

### カッコの使用

#### ルール
角カッコ「（）」は禁止し、半角のカッコ「()」を使用する。カッコの前後に半角スペースを設定することは禁止する。
#### 理由
半角カッコの統一使用により、文字エンコーディングの問題を避け、視覚的な一貫性を保つ。
#### 具体例
悪い例:
```
設定ファイル （config.json） を編集します。
```

良い例:
```
設定ファイル(config.json)を編集します。
```

## セクション構成と書式

### 見出しの階層構造

#### ルール
見出しは `#`、`##`、`###` を適切に使用し、階層構造を明確にする。見出しに番号は絶対に使用しない。
#### 理由
明確な階層構造により情報の整理が容易になり、番号の使用を避けることで将来的な変更に対する耐性を高める。
#### 具体例

悪い例:
```markdown
## 1. 基本設定
### 1.1 ファイル設定
### 1.2 ネットワーク設定
```

良い例:
```markdown
## 基本設定
### ファイル設定
### ネットワーク設定
```

### コードブロック導入時の空白

#### ルール
段落がコードブロックを導入する場合、その段落と直後のコードブロックの間に空行は禁止する。

#### 理由
コードブロックとその説明との関連性を明確にし、不必要な空白を排除する。

#### 具体例

悪い例:
```markdown
以下のコマンドを実行します。

```bash
npm install
```

良い例:
```markdown
以下のコマンドを実行します。
```bash
npm install
```

## リスト

### 箇条書きマーカーの統一

#### ルール
箇条書きマーカーは `-` を使用する。マーカー `-` の後には半角スペースを1つだけ入れる。ネストされたリストを含め、全ての階層でこのルールを適用する。

#### 理由
統一されたマーカーにより視覚的な一貫性を保ち、読みやすさを向上させる。

#### 具体例

悪い例:
```markdown
* 項目1
+ 項目2
  * サブ項目A
  + サブ項目B
```

良い例:
```markdown
- 項目1
- 項目2
  - サブ項目A
  - サブ項目B
```

### リストの用途

#### ルール
箇条書きは、関連する複数の項目を並列に列挙する場合に使用する。手順を説明する場合は、番号付きリストの使用は固く禁止する。

#### 理由
用途に応じた適切なリスト形式の使用により、情報の性質を明確に伝える。

#### 具体例

悪い例:
```markdown
1. 最初のステップ
2. 次のステップ
3. 最後のステップ
```

良い例:
```markdown
### 最初のステップ
ファイルを開きます。

### 次のステップ
内容を編集します。

### 最後のステップ
ファイルを保存します。
```

### リストアイテム間の空白

#### ルール
リストアイテムのテキストが複数行にわたる場合を除き、リストアイテム間に空行は禁止する。

#### 理由
不必要な空行を排除し、リストの一体感を保つ。

#### 具体例

悪い例:
```markdown
- 項目1

- 項目2

- 項目3
```

良い例:
```markdown
- 項目1
- 項目2
- 項目3
```

## コードブロック

### 言語指定

#### ルール
コードブロックには、適切な言語指定を常に行う。コマンドプロンプトやターミナルのエラー文などは`bash`をコードブロックの言語に設定する。

#### 理由
適切なシンタックスハイライトにより可読性が向上し、コードの性質が明確になる。

#### 具体例

悪い例:
```
npm install
```

良い例:
```bash
npm install
```

### コードブロックの説明

#### ルール
コードブロックが示す内容の説明は、そのコードブロックの直前の段落に記述する。

#### 理由
コードブロックとその説明との関連性を明確にし、理解しやすくする。

#### 具体例

悪い例:
```bash
npm install
```
パッケージをインストールします。

良い例:
パッケージをインストールします。
```bash
npm install
```

### コードブロック内のコメント

#### ルール
ソースコードにコメントを付与することを禁止する。記載する場合は直感的に理解できない特記事項のみを記載する。

#### 理由
過度なコメントは可読性を損ない、コード自体の理解を妨げる。

#### 具体例

悪い例:
```javascript
// 変数を宣言します
const name = "example";
// ログを出力します
console.log(name);
```

良い例:
```javascript
const name = "example";
console.log(name);
```

## 手順の説明

### 手順の構造

#### ルール
一連の操作手順を説明する場合は、各ステップをH3レベルの見出し (`### ステップ名`) で明確に区切り、その下に説明や関連する箇条書きを配置する。
いかなる状況でも、手順を示すために番号付きリストやセクション番号を使用してはならない。

#### 理由
明確な見出し構造により手順の理解が容易になり、番号の使用を避けることで将来的な変更に対する耐性を高める。

#### 具体例

悪い例:
```markdown
## 設定手順
1. ファイルを開く
2. 内容を編集する
3. ファイルを保存する
```

良い例:
```markdown
## 設定手順

### ファイルを開く
設定ファイルを任意のエディタで開きます。

### 内容を編集する
必要な項目を変更します。

### ファイルを保存する
変更内容を保存して完了です。
```

### 手順の明確性

#### ルール
各手順は、具体的かつ明確な指示を含める。曖昧な表現は避ける。可能な限り、各手順の実行結果や、正しく実行されたことを確認する方法も記述する。

#### 理由
明確で具体的な指示により、ユーザーが迷うことなく手順を実行できる。

#### 具体例

悪い例:
### 設定を変更する
適切に設定を変更してください。

良い例:
### 設定を変更する
`config.json`ファイルの `port` 項目を `3000` から `8080` に変更します。
```bash
"port": 8080
```
変更後、ファイルを保存して設定が反映されることを確認します。

---
### 箇条書きは漏れなく重複なく
#### ルール
箇条書きの項目は網羅的で重複がなく(MECE)、語尾を統一する。
#### 理由
情報が整理され、抜け漏れや混乱を防げる。

#### 具体例
悪い例:

```
■ 改善点 ・コストダウンを図る ・売上アップ ・ブランドイメージ
```

良い例:

```
■ 改善点 ・コスト削減 ・売上向上 ・ブランド強化
```

### 事実・解釈・提案を分ける

#### ルール
客観的事実、自分の解釈、行動提案を明確に区別して伝える。

#### 理由
論理の流れが明確になり、説得力が増す。

#### 具体例
悪い例:
```
ウェブサイトの成果が悪いので予算を増やすべきです
```

良い例:
```
【提案】ウェブサイト改善策を実施する 
■ 事実 CVR 2.1%→1.5%に低下 
■ 解釈 先月の試作でランディングページの導線が複雑になり、CVRが低下した可能性がある 
■ 提案 ・デザイン簡素化 ・ABテスト実施
```
### 全体から詳細へ書く

#### ルール
最初に全体像を示してから詳細に入る。

#### 理由
読み手が文脈を理解した上で詳細を読めるため理解しやすい。

#### 具体例
悪い例:
```
まず1つ目の機能について説明します。次に2つ目の...（詳細が続く）...したがって新システムは効果的です。
```

良い例:
```
【提案】新システムを導入する 新システムで業務効率を50%向上させます。
■ なぜやるのか 
現在の手作業による入力ミスと重複作業が解消するため 

■ システムの機能詳細
◎ 自動データ入力 手作業の入力作業がなくなり、時間とミスを削減できます。
特に請求書処理で効果が高いです。 

◎ エラーチェック機能 入力内容を自動で検証し、不整合を事前に検出します。月次報告書の精度が向上します。 
◎ レポート自動生成 データ集計と資料作成が自動化され、分析時間を確保できます。
経営判断が迅速になります。 

■ 再確認 このシステム導入で作業効率が大幅に向上し、重要業務に集中できます。
```
### 箇条書きの語尾を統一する

#### ルール
同じ階層の箇条書きは、語尾を名詞止めか動詞止めで統一する。 ※箇条書き内では同じ語尾の連続が適切であり、ルール22（同じ語尾の連続を避ける）よりも優先される。

#### 理由
読みやすさが向上し、情報が整理される。

#### 具体例
悪い例:
```
■ 施策 ◎ 主要施策 - 顧客満足度を向上させる - コスト削減 - ブランドの強化を図る
```

良い例:
```
■ 施策 ◎ 主要施策 - 顧客満足度の向上 - コストの削減 - ブランド力の強化
```

```
■ 施策 ◎ 主要施策 - 顧客満足度を向上させる - コストを削減する - ブランド力を強化する
```
### 意味の区切りで改行し、視覚的な読みやすさを高める

#### ルール
読点（「、」）の後や、意味が自然に区切れる箇所で改行する
1文が短い場合（30字以内）は無理に改行しない
文の途中で意味が通じなくなる不自然な改行は避ける

#### 理由
スマートフォンやPCで文章を読む際に、視覚的に内容の区切りが明確になり、理解しやすくなる。適切な改行は文章のリズムを整え、長文を読む際の心理的な負担を軽減する。
#### 具体例
悪い例:

```
先日ご依頼いただきました件につきまして、調査した結果をご報告いたします。スケジュール遅延の主な原因は仕様変更が頻繁に発生したこととテスト段階でのリソース不足が重なったためです。
```

良い例:

```
先日ご依頼いただいた件について、 調査結果をご報告いたします。 スケジュール遅延の主な原因は、以下の2点です。 ・仕様変更が頻繁に発生したこと ・テスト段階でリソースが不足したこと
```

```
先日ご依頼いただいた件の調査結果をご報告します。 スケジュール遅延の主な原因をご説明します。 第一に、仕様変更が頻繁に発生しました。 第二に、テスト段階でリソースが不足しました。
```
### 短い文章は階層化しない

#### ルール
200字以内かつ要点が1つの場合は、階層化せず簡潔な文章で伝える。

#### 理由
シンプルな内容は構造化よりも端的な表現の方が伝わりやすい。

#### 具体例
悪い例:

```
■ 報告 ◎ ミーティング ・日程変更 ・明日から明後日に
```

良い例:
```
【共有】明日のミーティングを明後日に変更する 都合が合わない方が多かったため変更しました。
```
### 同じ語尾の連続を避ける

#### ルール
通常の文章では、「〜です」などの同じ語尾が3回以上連続しないよう文末表現を変える。以下の例外があります：
箇条書き内では、むしろ同じ語尾で統一する
同種の情報が3つ以上ある場合は、通常文ではなく箇条書きを使用する

#### 理由
文章にリズムが生まれ、読みやすくなる。箇条書きでは逆に語尾を統一することで情報の整理が容易になる。

#### 具体例
悪い例:

```
今から話すのはカレーに欠かせない材料です。一つ目は新米で炊き立て白ごはんです。二つ目は質の高い牛肉です。三つ目は隠し味のりんごです。
```

良い例:
```
今から話すのはカレーに欠かせない材料がある。一つ目は新米で炊き立て白ごはん。二つ目は質の高い牛肉。三つ目は隠し味のりんごだ。
```

または箇条書きにする場合:
```
■ カレーで重要な材料 ・新米で炊き立て白ごはん ・質の高い牛肉 ・隠し味のりんご
```
### 対比は構造で表現する

#### ルール
「しかし」「ですが」などの逆接表現は使わず、項目を分けて構造的に対比を示す。

#### 理由
論点が明確になり、混乱を防げる。

#### 具体例
悪い例:

```
このプランはコストが低いですが、リスクが高いです。
```

良い例:
```
■ このプランの評価 ◎ メリット このプランは低コストで実施可能です。具体的には前回比30%削減できます。 ◎ デメリット 開発期間短縮によるリスクがあります。特に品質担保が課題です。
```
### 「また」「さらに」を減らす

#### ルール
「また」「さらに」「加えて」「そのうえ」などの接続詞を減らし、箇条書きや段落で整理する。

#### 理由
簡潔で読みやすい文章になる。

#### 具体例
悪い例:
```
新機能を追加しました。また、バグも修正しました。さらに、UIも改善しています。また、ユーザーからのフィードバックも反映しました。加えて、マニュアルも更新しています。
```

良い例:
```
■ アップデート内容 ◎ 機能面の改善 新機能を追加しました。これによりデータ分析が容易になります。 ◎ 不具合対応 複数のバグを修正しました。特に検索機能の不具合が解消されています。 ◎ 使い勝手の向上 UIを改善しました。ボタン配置を直感的に変更しています。 ユーザーフィードバックを反映しました。特に操作性の向上に注力しました。 マニュアルを更新しました。新機能の説明を追加しています。
```
### 同じ階層の箇条書きは統一する

#### ルール
同じ階層の箇条書きには同レベルの情報のみを入れ、内容とフォーマットを統一する。

#### 理由
情報の整理がしやすく、読みやすい文章になる。

#### 具体例
悪い例:
```
■ プロジェクト進捗 ◎ 現状 デザイン完了 コーディングは進行中 テスト担当は佐藤さん 来週から検証開始予定
```

良い例:
```
■ プロジェクト進捗 ◎ 各工程の状況 デザインは完了しています（5/10）。 コーディングは現在進行中です（進捗70%）。 テストはまだ着手していません。 ◎ 今後のスケジュール 検証は5/24（月）に開始します。 完了は5/31（月）を予定しています。 ◎ 担当者 デザインは田中が担当しました。 コーディングは鈴木が実施中です。 テストは佐藤が担当します。
```

### 元記事の構成と意図の完全保持

#### ルール
既存記事の改善時は、元記事の構成、セクション構造、論理展開を完全に保持する。記事の目的や意図を変更せず、書式調整のみを行う。

#### 理由
記事の構成は著者の意図と論理的思考を反映しており、これを変更することは記事の本質的価値を損なう。また、既存の記事には既に読者がいる可能性があり、構成変更は混乱を招く。

#### 具体例
悪い例:

```markdown
# 元記事
## 検証プロセスと仮説
### 当初の仮説
### 検証で判明した事実

# 改善版（NG）
## 技術的根本原因の分析
（検証プロセスを削除し、結論のみに変更）
```

良い例:

```markdown
# 元記事
## 検証プロセスと仮説
### 当初の仮説
### 検証で判明した事実

# 改善版（OK）
## 検証プロセスと仮説
### 当初の仮説
### 検証で判明した事実
```

### 引用元URLの必須保持

#### ルール
技術記事における引用文には、必ず元記事で指定されていた引用元URLを保持する。URLの削除や省略は禁止する。

#### 理由
引用元URLは技術記事の信頼性担保、詳細情報へのアクセス、将来への変更追跡において不可欠な要素。これを削除することは学術的誠実性に反し、読者の利益を損なう。

#### 具体例
悪い例:

```markdown
> Miniflare v3 now uses workerd, the open-source Cloudflare Workers runtime.
（URLを削除）
```

良い例:

```markdown
> Miniflare v3 now uses workerd, the open-source Cloudflare Workers runtime.

https://developers.cloudflare.com/workers/testing/miniflare/migrations/from-v2
```

### 作業種別による制約の使い分け
#### ルール
ドキュメント作業の種別を明確に区別し、それぞれに適切な制約を適用する。

#### 作業種別の定義
**既存記事の改善・添削作業**
- 既に存在する記事の書式調整や文体改善
- 元記事の構成、内容、意図を完全に保持することが最優先
- 新しいセクションや要素の追加は禁止
- 書式調整のみに限定

**新規ドキュメント作成作業**
- ソースコード、設計書、その他の元情報から新しいドキュメントを作成
- 完全で有用なドキュメントの作成が目的
- 必要な要素(概要、使用例、設定方法、トラブルシューティング等)を適切に追加
- ドキュメントスタイルガイドラインに完全準拠

#### 理由
作業の目的が根本的に異なるため、同一のルールを適用すると適切な成果物を作成できない。
既存記事改善では元記事の価値保持が、新規作成では完全性が重要。

#### 具体例

既存記事改善時(追加禁止):
```markdown
# 元記事にないセクションを追加してはならない
## 既存のセクション
（元記事の内容を書式のみ調整）
```

新規ドキュメント作成時(追加推奨):
```markdown
# ソースコードから完全なドキュメントを作成
## 概要
## インストール方法
## 使用例
## 設定オプション
## トラブルシューティング
```

### 技術的検証プロセスの必須保持

#### ルール
技術記事において、問題の検証プロセス、仮説検討、調査手順などの記述は必ず保持する。これらは「冗長」として削除してはならない。

#### 理由
技術的検証プロセスは記事の学術的価値と再現性を担保する核心要素。読者が同様の問題に遭遇した際の調査手法を提供し、結論に至るまでの論理的思考を示すため不可欠。

#### 具体例
悪い例:

```markdown
# 元記事の検証プロセス部分を削除
## 問題の根本原因（検証過程を省略し結論のみ）
```

良い例:
```markdown
# 元記事の検証プロセスを完全保持
## 検証プロセスと仮説
### 当初の仮説
### 検証で判明した事実
### 実際の原因
```

### 既存記事改善時の確認項目

#### ルール
既存記事の改善を行う前に、以下の項目を必ず確認し、全て「保持」であることを確認する。改善後も再度確認を行う。

#### 確認項目
- 元記事の全セクション構成が保持されているか
- 元記事の論理展開順序が保持されているか
- 全ての引用元URLが保持されているか
- 元記事にない新規セクションを追加していないか
- 技術的検証プロセスが完全に保持されているか
- 元記事の意図と目的が変更されていないか

#### 理由

系統的な確認により、改善作業中の意図しない変更や削除を防ぎ、元記事の価値を確実に保持するため。

---

## 依頼事項：ドキュメントの作成

このプロンプトは、主にシステム開発におけるドキュメントの品質を向上させるために使用します。 
提供された「ドキュメンテーション スタイルガイドライン」を絶対的な基準とし、入力された文章の問題点を徹底的に洗い出し、具体的なドキュメントを作成してください。

### 入力される文章について
メール、チャットメッセージ、社内報告書、企画書、顧客向け資料、ソースコード、セットアップのやり方などあらゆるビジネス文書を対象とします。

## 期待するアウトプットの詳細

### 改善した全文文章

指摘箇所だけでなく、文章全体の質を向上させた完成版の文章を全文で作成してください。この時点では出力しなくて良いです。

### 改善した文章を社内文章ルールでもう一度評価する

上記の[[#改善した全文文章]]作成した「改善した全文文章」を「ドキュメンテーション スタイルガイドライン」を用いて再度、徹底的に評価・推敲し、さらなる改善点があれば修正を加えた最終完成版の文章を提示してください。

出力形式：ユーザーがコピー＆ペーストしやすく、また容易に改変できるよう、改善後の全文は必ずマークダウンのコードブロック形式（バッククォート3つ \`\`\` で囲む形式）で出力してください。

全面的な改善:

原則として、省略せずに全文を改善して提示してください。
平易かつ明瞭な表現を用い、専門用語や社内スラングは避け、誰が読んでも一度で理解できる文章を目指してください。
文脈として読み手に伝えたい重要なポイントは太字にしてください。
そもそもの構成が破綻している場合は抜本的に見直してください。
「ドキュメンテーション スタイルガイドライン」の全項目を網羅的に確認し、遵守してください。

構造と論理:
箇条書きの各項目が真に並列な関係にあるか精査してください。並列でない場合は、情報を整理し、適切な階層構造（例：マークダウンの # ## ### ）を用いて表現し直してください。

不明情報の取り扱い:
良い文章作成に必要な情報が不足している場合、勝手に創作せず、 \[要確認：〇〇の詳細\] や \[〇〇のため、具体的な数値を記入してください\] や\[仮置き\]のように記述してください。

## 【重要】改善案のアウトプットで遵守すべきフォーマットルール

以下のルールは、あなたが出力する改善案および改善後全文において**必ず遵守**してください。

マークダウンの適切な使用:
見出し、太字、イタリック、リスト、引用、コードブロックなど、マークダウンの機能を適切に活用し、情報の構造と可読性を最大限に高めてください。

## 出力前の思考過程（内部推論）における条件

内部推論の時間はどれだけかけても問題ありません
漏れが絶対にないようにはじめにやることを洗い出してください
思考途中で一度、本当に指示していることの実践もれがないか確認してください
最低でも2万トークンは思考過程の推論で利用してください
思考プロセスは全て日本語で出してください 